apiVersion: v1
kind: Template
labels:
  demo: coolstore-microservice
metadata:
  annotations:
    description: CoolStore demo microservices deployments persistent template
    iconClass: icon-java
    tags: microservice,jboss,spring
  name: coolstore-inventory-deployment
objects:

# Rating Service
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: rating
    labels:
      app: rating
  spec:
    tags:
      - name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: rating
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: rating:latest
    source:
      contextDir: rating-service
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      sourceStrategy:
        env:
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
        from:
          kind: ImageStreamTag
          name: redhat-openjdk18-openshift:1.1
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: Source
    triggers:
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: rating
    labels:
      app: rating
  spec:
    replicas: 0
    selector:
      deploymentconfig: rating
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: rating
          deploymentconfig: rating
        name: rating
      spec:
        containers:
          - env:
              - name: KUBERNETES_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
            image: rating
            imagePullPolicy: Always
            name: rating
            ports:
              - containerPort: 8778
                name: jolokia
                protocol: TCP
              - containerPort: 8080
                name: http
                protocol: TCP
            livenessProbe:
              failureThreshold: 2
              httpGet:
                path: "/health/liveness"
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 60
              periodSeconds: 10
              successThreashold: 1
              timeoutSeconds: 1
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: "/health/readiness"
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreashold: 1
              timeoutSeconds: 1
            resources:
              limits:
                memory: 1Gi
              requests:
                memory: 200Mi
        terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 75
    triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
            - rating
          from:
            kind: ImageStreamTag
            name: rating:latest
        type: ImageChange
      - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"rating-mongodb","namespace":"","kind":"Service"}]'
    labels:
      app: rating
    name: rating
  spec:
    ports:
      - port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      deploymentconfig: rating
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: rating
    name: rating-mongodb
  spec:
    ports:
      - name: mongo
        port: 27017
        protocol: TCP
        targetPort: 27017
    selector:
      deploymentconfig: rating-mongodb
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: rating
      comp-type: database
    name: rating-mongodb
  spec:
    replicas: 0
    selector:
      deploymentconfig: rating-mongodb
    strategy:
      recreateParams:
        post:
          execNewPod:
            command:
              - /bin/sh
              - -i
              - -c
              - env && while ! mongo ${RATING_MONGODB_SERVICE_HOST}:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval="$MONGODB_INIT" > /dev/null 2>&1; do echo "waiting for mongo ..."; sleep 5; done
            containerName: rating-mongodb
            env:
              - name: MONGODB_INIT
                value: db.ratings.insert({"_id":"329299","itemId":"329299","rating":5.0,"count":1});
                  db.ratings.insert({"_id":"329199","itemId":"329199","rating":1.0,"count":12});
                  db.ratings.insert({"_id":"165613","itemId":"165613","rating":2.3,"count":31});
                  db.ratings.insert({"_id":"165614","itemId":"165614","rating":3.0,"count":51});
                  db.ratings.insert({"_id":"165954","itemId":"165954","rating":4.0,"count":66});
                  db.ratings.insert({"_id":"444434","itemId":"444434","rating":5.0,"count":76});
                  db.ratings.insert({"_id":"444435","itemId":"444435","rating":4.0,"count":83});
                  db.ratings.insert({"_id":"444436","itemId":"444436","rating":3.0,"count":123});
          failurePolicy: ignore
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: rating
          comp-type: database
          deploymentconfig: rating-mongodb
      spec:
        containers:
          - env:
              - name: KUBERNETES_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
              - name: MONGODB_USER
                value: ${RATING_DB_USERNAME}
              - name: MONGODB_PASSWORD
                value: ${RATING_DB_PASSWORD}
              - name: MONGODB_DATABASE
                value: ratingdb
              - name: MONGODB_ADMIN_PASSWORD
                value: ${RATING_DB_PASSWORD}
            image: mongodb
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 10
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              tcpSocket:
                port: 27017
              timeoutSeconds: 1
            name: rating-mongodb
            ports:
              - containerPort: 27017
                protocol: TCP
            readinessProbe:
              exec:
                command:
                  - /bin/sh
                  - -i
                  - -c
                  - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                    --eval="quit()"
              failureThreshold: 10
              initialDelaySeconds: 3
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources:
              limits:
                memory: 512Mi
            securityContext:
              capabilities: {}
              privileged: false
            terminationMessagePath: /dev/termination-log
            volumeMounts:
              - mountPath: /var/lib/mongodb/data
                name: mongodb-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
          - emptyDir: {}
            name: mongodb-data
    test: false
    triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
            - rating-mongodb
          from:
            kind: ImageStreamTag
            name: mongodb:3.2
            namespace: ${IMAGE_STREAM_NAMESPACE}
        type: ImageChange
      - type: ConfigChange

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: rating-config
    labels:
      app: rating
  data:
    rating-config.yaml: |-
      rating.http.port: 8080
      connection_string: mongodb://rating-mongodb:27017
      db_name: ratingdb
      username: ${RATING_DB_USERNAME}
      password: ${RATING_DB_PASSWORD}
parameters:
- description: CoolStore application image version to be deployed (imagestreams should exist)
  displayName: CoolStore image version
  name: APP_VERSION
  required: true
  value: latest
- description: Hostname suffix used for routes e.g. cart-<HOSTNAME_SUFFIX> inventory-<HOSTNAME_SUFFIX>
  displayName: Hostname suffix used for routes
  name: HOSTNAME_SUFFIX
  required: true
- description: Inventory Service database user name
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: INVENTORY_DB_USERNAME
  required: true
- description: Inventory Service database user password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: INVENTORY_DB_PASSWORD
  required: true
- description: Catalog Service database user name
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: CATALOG_DB_USERNAME
  required: true
- description: Catalog Service database user password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: CATALOG_DB_PASSWORD
  required: true
- description: Decision Server Username
  name: KIE_SERVER_USER
  required: true
  value: brmsAdmin
- description: Decision Server Password
  from: '[a-zA-Z]{6}[0-9]{1}!'
  generate: expression
  name: KIE_SERVER_PASSWORD
  required: true
- description: Decision Server Coolstore Rules Container Spec
  name: KIE_CONTAINER_DEPLOYMENT
  required: true
  value: CoolStoreRulesContainer=com.redhat:coolstore:2.0.0
- description: Rating Service database user name
  displayName: Rating Database username
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: RATING_DB_USERNAME
  required: true
- description: Rating Service database user password
  displayName: Rating Database password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: RATING_DB_PASSWORD
  required: true
- description: Review Service database user name
  displayName: Review Database username
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: REVIEW_DB_USERNAME
  required: true
- description: Review Service database user password
  displayName: Review Database password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: REVIEW_DB_PASSWORD
  required: true
- description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
  displayName: ImageStream Namespace
  value: openshift
  name: IMAGE_STREAM_NAMESPACE
  required: true